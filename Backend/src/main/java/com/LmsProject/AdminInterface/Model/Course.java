package com.LmsProject.AdminInterface.Model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.Data;

@Entity
@Table(name = "Course")
@Inheritance(strategy = InheritanceType.JOINED)
@Data
public class Course {

  /** Unique identifier for a course. Auto-generated by the database. */
  @Id
  @Column(name = "course_id", nullable = false)
  private Long courseId;

  /** Name of the course. */
  @Column(nullable = false)
  private String name;

  /** The date when the course begins. */
  @Temporal(TemporalType.DATE)
  @Column(nullable = false)
  private Date startDate;

  /** The date when the course ends. Optional field. */
  @Temporal(TemporalType.DATE)
  private Date endDate;

  /**
   * List of lecturers teaching this course. Many-to-many relationship: one course can have multiple
   * lecturers, and one lecturer can teach multiple courses.
   */
  @JsonIgnore
  @ManyToMany(fetch = FetchType.EAGER)
  @JoinTable(
      name = "course_lecturer",
      joinColumns = @JoinColumn(name = "course_id"),
      inverseJoinColumns = @JoinColumn(name = "lecturer_id", referencedColumnName = "person_id"))
  private List<Lecturer> lecturers = new ArrayList<>();

  /**
   * List of students enrolled in this course. Many-to-many relationship: one course can have
   * multiple students, and one student can be enrolled in multiple courses.
   */
  @JsonIgnore
  @ManyToMany(fetch = FetchType.LAZY)
  @JoinTable(
      name = "course_student",
      joinColumns = @JoinColumn(name = "course_id"),
      inverseJoinColumns = @JoinColumn(name = "student_id"))
  private List<Student> students = new ArrayList<>();

  /**
   * List of lectures scheduled for this course. One-to-many relationship: one course can have
   * multiple lectures.
   */
  @JsonManagedReference
  @OneToMany(
      mappedBy = "course",
      cascade = CascadeType.ALL,
      orphanRemoval = true,
      fetch = FetchType.EAGER)
  private List<Lecture> lectures = new ArrayList<>();


  /**
   * Adds a lecture to this course and establishes the bidirectional relationship.
   *
   * @param lecture The lecture to add to this course
   */
  public void addLecture(Lecture lecture) {
    lectures.add(lecture);
    lecture.setCourse(this);
  }

  /**
   * Removes a lecture from this course and breaks the bidirectional relationship.
   *
   * @param lecture The lecture to remove from this course
   */
  public void removeLecture(Lecture lecture) {
    lectures.remove(lecture);
    lecture.setCourse(null);
  }

  /**
   * Adds a student to this course (enrolls them).
   *
   * @param student The student to add to this course
   */
  public void addStudent(Student student) {
    students.add(student);
  }

  /**
   * Removes a student from this course (unenrolls them).
   *
   * @param student The student to remove from this course
   */
  public void removeStudent(Student student) {
    students.remove(student);
  }

  /**
   * Status of the course (ACTIVE or COMPLETED).
   */
  @Enumerated(EnumType.STRING)
  @Column
  private CourseStatus status ;


  /**
   * Enum representing the possible statuses of a course.
   */
  public enum CourseStatus {
    ACTIVE, COMPLETED
  }


  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "semester_id")
  @JsonBackReference
  private Semester semester;


  private String courseImage;
}
